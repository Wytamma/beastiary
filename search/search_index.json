{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Beastiary is designed for visualising and analysing MCMC trace files generated from Bayesian phylogenetic analyses. Beastiary works in real-time and on remote servers (e.g. a HPC). Its goal is to be a beautiful and simple, yet powerful tool for Bayesian phylogenetic inference.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>$ pip install beastiary\n\n---&gt; 100%\n</code></pre>"},{"location":"#example","title":"Example","text":"<p>To start beastiary use the <code>beastiary</code> command. This will start the beastiary server. </p> <pre><code>$ beastiary\n\n\ud83d\udc19\ud83d\udc01 &lt;span style=\"color: #3498db;\"&gt;STARTING BEASTIARY&lt;/span&gt; \ud83d\udc01\ud83d\udc19\n\nGo to: &lt;span style=\"color: green;\"&gt;http://127.0.0.1:5000/login?token=8e02d06b-d30e-4a89-8476-fb22712a31b3&lt;/span&gt;\nIf prompted enter token: 8e02d06b-d30e-4a89-8476-fb22712a31b3\n</code></pre> <p>The server will start on http://127.0.0.1:5000/ by default. Every time the server starts it will generate a unique token that can be used to log into the webapp. </p> <p>Go to http://127.0.0.1:5000/ and log in with the token. </p> <p></p> <p>Add a log file using the <code>ADD</code> button. </p> <p></p> <p>Explore the traces of different parameters. </p> <p></p>"},{"location":"citation/","title":"Citation","text":"<p>If you use Beastiary in your research please cite our paper Wirth &amp; Duchene 2022. </p> <p>Wytamma Wirth, Sebastian Duchene, Real-Time and Remote MCMC Trace Inspection with Beastiary, Molecular Biology and Evolution, Volume 39, Issue 5, May 2022, msac095, https://doi.org/10.1093/molbev/msac095</p>"},{"location":"citation/#bibtex","title":"Bibtex","text":"<pre><code>@article{10.1093/molbev/msac095,\n    author = {Wirth, Wytamma and Duchene, Sebastian},\n    title = \"{Real-Time and Remote MCMC Trace Inspection with Beastiary}\",\n    journal = {Molecular Biology and Evolution},\n    volume = {39},\n    number = {5},\n    year = {2022},\n    month = {05},\n    abstract = \"{Bayesian phylogenetics has gained substantial popularity in the last decade, with most implementations relying on Markov chain Monte Carlo (MCMC). The computational demands of MCMC mean that remote servers are increasingly used. We present Beastiary, a package for real-time and remote inspection of log files generated by MCMC analyses. Beastiary is an easily deployed web-app that can be used to summarize and visualize the output of many popular software packages including BEAST, BEAST2, RevBayes, and MrBayes via a web browser. We describe the design and implementation of Beastiary and some typical use-cases, with a focus on real-time remote monitoring.}\",\n    issn = {1537-1719},\n    doi = {10.1093/molbev/msac095},\n    url = {https://doi.org/10.1093/molbev/msac095},\n    note = {msac095},\n    eprint = {https://academic.oup.com/mbe/article-pdf/39/5/msac095/43913150/msac095.pdf},\n}\n</code></pre>"},{"location":"citation/#ris","title":"RIS","text":"<pre><code>Provider: Silverchair\nDatabase: Oxford University Press\nContent: text/plain; charset=\"UTF-8\"\n\nTY  - JOUR\nAU  - Wirth, Wytamma\nAU  - Duchene, Sebastian\nT1  - Real-Time and Remote MCMC Trace Inspection with Beastiary\nPY  - 2022\nY1  - 2022/05/01\nDO  - 10.1093/molbev/msac095\nJO  - Molecular Biology and Evolution\nJA  - Mol Biol Evol\nVL  - 39\nIS  - 5\nSP  - msac095\nSN  - 1537-1719\nAB  - Bayesian phylogenetics has gained substantial popularity in the last decade, with most implementations relying on Markov chain Monte Carlo (MCMC). The computational demands of MCMC mean that remote servers are increasingly used. We present Beastiary, a package for real-time and remote inspection of log files generated by MCMC analyses. Beastiary is an easily deployed web-app that can be used to summarize and visualize the output of many popular software packages including BEAST, BEAST2, RevBayes, and MrBayes via a web browser. We describe the design and implementation of Beastiary and some typical use-cases, with a focus on real-time remote monitoring.\nY2  - 7/27/2022\nUR  - https://doi.org/10.1093/molbev/msac095\nER  - \n</code></pre>"},{"location":"citation/#endnote","title":"Endnote","text":"<pre><code>%0 Journal Article\n%A Wirth, Wytamma\n%A Duchene, Sebastian\n%T Real-Time and Remote MCMC Trace Inspection with Beastiary\n%B Molecular Biology and Evolution\n%D 2022\n%R 10.1093/molbev/msac095\n%1 msac095\n%J Molecular Biology and Evolution\n%V 39\n%N 5\n%@ 1537-1719\n%X Bayesian phylogenetics has gained substantial popularity in the last decade, with most implementations relying on Markov chain Monte Carlo (MCMC). The computational demands of MCMC mean that remote servers are increasingly used. We present Beastiary, a package for real-time and remote inspection of log files generated by MCMC analyses. Beastiary is an easily deployed web-app that can be used to summarize and visualize the output of many popular software packages including BEAST, BEAST2, RevBayes, and MrBayes via a web browser. We describe the design and implementation of Beastiary and some typical use-cases, with a focus on real-time remote monitoring.\n%[ 7/27/2022\n%U https://doi.org/10.1093/molbev/msac095\n</code></pre>"},{"location":"design/","title":"Design and Implementation","text":"<p>Beastiary is comprised of two parts, the back-end, a web-sever that exposes an Application Programming Interface (API) consumed by the front-end, a single page web-app.</p> <p></p> <p>The back-end monitors the log files generated by standard Bayesian phylogenetics software and communicates data to the front end via a web API. The front-end consumes data from the back-end via the web API and triggers the back-end to check for updates in the log files.</p> <p>The Beastiary back-end is written in modern Python (version 3.9) and builds on a modern web framework, FastAPI. Users can specify the path to log files and beastiary will check these files for updates when requested. Beastiary uses caching to save time reading through large log files. Once samples have been read from the log file they are saved in-memory and therefore any subsequent reads of the same samples are returned from memory. This last step is key to facilitate monitoring analyses that are very time consuming.</p> <p>The fronted is written in modern JavaScript (Typescript) and builds on Vue.js for interactivity. The front-end is an interactive single page web-app that allows users to visualise and explore trace data. Once a log file is added the front-end will periodically poll the back-end for new data appended to this log file. The front-end recalculates the effective sample size (ESS) of each trace when new data is returned. This statistic is a useful measure of the number of independent samples from the posterior, where a rule of thumb is to obtain at least 200 for key parameters (Rambaut et al., 2018). A burn-in (default 10%) is applied to all traces. Because the trace is updated in users analysing data in real-time may need to adjust the burn-in depending on the number of samples collected. We see this as a benefit as burn-in is often arbitrarily set to 10%, applying a burn-in in real-time forces users to consider an appropriate value for their analysis.</p> <p>Beastiary provides several plots for visually assessing and exploring data. These plots are implemented using the JavaScript library Plotly.js which can handle thousands of individual points updating in real-time. Ploty.js also enables simple data exploration such as tool tip generation, trace selection, and plot area zooming. </p>"},{"location":"design/#references","title":"References","text":"<p>Andrew Rambaut, Alexei J Drummond, Dong Xie, Guy Baele, Marc A Suchard, Posterior Summarization in Bayesian Phylogenetics Using Tracer 1.7, Systematic Biology, Volume 67, Issue 5, September 2018, Pages 901\u2013904, https://doi.org/10.1093/sysbio/syy032</p>"},{"location":"plots/Cumulative-ESS/","title":"Cumulative ESS","text":"<p>The 'ESS' panel will produce cumulative ESS plots for the selected traces. Cumulative ESS plots are a novel tool that can be used to asses mixing quality and estimate how long a run will take to reach a desired ESS value (Voloch et al., 2012; Vehtarh et al., 2021). These plots are calculated on the frontend so it may take a few moments for the plot to load (depending on the amount of data). </p> <p></p> <p>Each point in the plot above represents the ESS value up to that point (in steps of 100 samples). The 'meanRate' trace has better mixing than the 'age(root)' parameter i.e. the increase in ESS is more linear. However, the overall slope of 'age(root)' is steeper than 'meanRate' and thus reaches the target ESS (200, green dotted line) before 'meanRate' (which will likely reach the target around 55 million steps).</p> <p>The rate at which ESS increases is dependent on the mixing quality. In particular, the ESS of a well mixing chain should increase linearly with the number of steps (Vehtarh et al., 2021). As a result, the slope of this relationship can be used to estimate how long a run will take to reach a desired ESS value. </p>"},{"location":"plots/Cumulative-ESS/#references","title":"References","text":"<p>Voloch CM, Schrago CG. Impact of the partitioning scheme on divergence times inferred from Mammalian genomic data sets. Evol Bioinform Online. 2012;8:207-18. doi: 10.4137/EBO.S9627. Epub 2012 May 14. PMID: 22654486; PMCID: PMC3362329.</p> <p>Aki Vehtari, Andrew Gelman, Daniel Simpson, Bob Carpenter, Paul-Christian B\u00fcrkner \"Rank-Normalization, Folding, and Localization: An Improved R for Assessing Convergence of MCMC (with Discussion),\" Bayesian Analysis, Bayesian Anal. 16(2), 667-718, (June 2021)</p>"},{"location":"plots/pairwise/","title":"Pairwise","text":"<p>The 'Pairwise' panel will pairwise plots for the selected traces. Pairwise plots are useful for finding correlations between the samples.</p> <p></p> <p>Here we can see that <code>meanRate</code> is negatively correlated with <code>treeLength</code>.</p>"},{"location":"plots/parallel-coordinates/","title":"Parallel coordinates","text":"<p>The 'Parallel' panel will produce Parallel coordinates plots for the selected traces. Here, a set of parameters and their values are represented as columns. Each sample is drawn as a line across these parameters. Although parallel coordinates have not been typically used in MCMC trace exploration, we believe they will be useful at elucidating MCMC behaviour and correlation between parameters in MCMC trace, especially in high dimensional models. </p> <p></p> <p>Each y-axis in the plot above shows the values of parameter traces in the analysis and each line corresponds to an MCMC sample. The samples are coloured according to their joint probability (labeled here as 'posterior'). The order of traces along the x-axis is arbitrary and can can be adjusted in Beastiary.</p> <p>As a case in point, the plot above the posterior and likelihood are strongly positively correlated, as expected when the sequence data are highly informative, resulting in parallel lines, whereas other traces, like the prior, display less correlation. Lines are coloured by the first selected trace, e.g. their joint probability (labeled here as a 'posterior' according to BEAST2 that formally corresponds to an unormalised posterior probability) to facilitate interpretation. </p>"},{"location":"tutorial/","title":"Tutorial - User Guide - Intro","text":"<p>This tutorial shows you how to use Beastiary with most of its features, step by step.</p> <p>Each section gradually builds on the previous ones, but it's structured to separate topics, so that you can go directly to any specific one to solve your specific needs.</p> <p>It is also built to work as a future reference.</p> <p>So you can come back and see exactly what you need.</p>"},{"location":"tutorial/#install-beastiary","title":"Install Beastiary","text":"<p>The first step is to install Beastiary.</p> <pre><code>$ pip install beastiary\n\n---&gt; 100%\n</code></pre> <p>This will also install all of the required dependencies. </p> <p>Note</p> <p>Beastiary requires python version &gt;= 3.6.2.</p> <pre><code>pip3 install beastiary\n</code></pre> <p>If you are installing beastiary on a shared environment (e.g. a HPC) you may want to install will the --user flag.</p> <pre><code>pip3 install --user beastiary\n</code></pre>"},{"location":"tutorial/first-steps/","title":"First steps","text":"<p>To start beastiary use the <code>beastiary</code> command. This will start the beastiary server. </p> <pre><code>$ beastiary\n\n\ud83d\udc19\ud83d\udc01 &lt;span style=\"color: #3498db;\"&gt;STARTING BEASTIARY&lt;/span&gt; \ud83d\udc01\ud83d\udc19\n\nGo to: &lt;span style=\"color: green;\"&gt;http://127.0.0.1:5000/login?token=8e02d06b-d30e-4a89-8476-fb22712a31b3&lt;/span&gt;\nIf prompted enter token: 8e02d06b-d30e-4a89-8476-fb22712a31b3\n</code></pre> <p>The server will start on http://127.0.0.1:5000/ by default. Every time the server starts it will generate a unique token that can be used to log into the webapp. </p> <p>Go to http://127.0.0.1:5000/ and log in with the token. </p> <p></p> <p>Add a log file using the <code>ADD</code> button. </p> <p></p> <p>Explore the traces of different parameters. </p> <p></p>"},{"location":"tutorial/google-colab/","title":"Google colab","text":"<p>Because beastiary is a webserver at heart it can run pretty much anywhere a website can. This can lead to some pretty interesting results. </p> <p>For example, beastiary can be run in Google Colab notebooks. Enzo Andree created a notebook to run BEAST2 in the cloud, taking advantage of the free GPUs provided by google.</p> <p>Here you can see an example of this notebook adapted to also run beastiary: </p> <p>https://colab.research.google.com/gist/Wytamma/67bdaa46f7c3c64616592e6a8fc23f4d/beastiary.ipynb</p> <p></p> <p></p>"},{"location":"tutorial/log-file-format/","title":"Log file format","text":""},{"location":"tutorial/log-file-format/#creating-your-own-log-file","title":"Creating your own log file","text":"<p>Beastiary reads tsv (tab delimited files) by default. To create your own log file make sure the first column is the <code>state</code> (e.g. an integer id). Save your log file in <code>.tsv</code> format (or some other kind of whitespace delimited file).</p> state header1 header2 etc 0 123 123 ... 1 123 123 ... ... ... ... ..."},{"location":"tutorial/log-file-format/#change-the-default-delimiter","title":"Change the default delimiter","text":"<p>Beastiary can read other delimited text file e.g. csv. To change the default delimiter e.g. to read csv files, use the <code>--delimiter</code> option with <code>\",\"</code>. Then pass the path to the csv file to beastiary. </p> <pre><code>$ beastiary --delimiter , data/beast.csv\n\n\ud83d\udc19\ud83d\udc01 &lt;span style=\"color: #3498db;\"&gt;STARTING BEASTIARY&lt;/span&gt; \ud83d\udc01\ud83d\udc19\n\nAdding log files:\n\u2705 - data/beast.csv\n\nGo to: &lt;span style=\"color: green;\"&gt;http://127.0.0.1:5000/login?token=8e02d06b-d30e-4a89-8476-fb22712a31b3&lt;/span&gt;\nIf prompted enter token: 8e02d06b-d30e-4a89-8476-fb22712a31b3\n</code></pre> <p>Note</p> <p>Any files with non standard delimiters (e.g. csv) must be loaded from the command line.</p>"},{"location":"tutorial/logs-from-the-command-line/","title":"Logs from the command line","text":""},{"location":"tutorial/logs-from-the-command-line/#single","title":"Single","text":"<p>A path to a log file can be passed to <code>beastiary</code> via the command line. The \u2705 indicates that the log was successfully added and will be available on start up. </p> <pre><code>$ beastiary data/hcv_coal.log\n\n\ud83d\udc19\ud83d\udc01 &lt;span style=\"color: #3498db;\"&gt;STARTING BEASTIARY&lt;/span&gt; \ud83d\udc01\ud83d\udc19\n\nAdding log files:\n\u2705 - data/hcv_coal.log\n\nGo to: &lt;span style=\"color: green;\"&gt;http://127.0.0.1:5000/login?token=8e02d06b-d30e-4a89-8476-fb22712a31b3&lt;/span&gt;\nIf prompted enter token: 8e02d06b-d30e-4a89-8476-fb22712a31b3\n</code></pre>"},{"location":"tutorial/logs-from-the-command-line/#multiple","title":"Multiple","text":"<p>Multiple paths can be passed to <code>beastiary</code> via the command line. The \u2705 indicates that each log was successfully added and will be available on start up. </p> <pre><code>$ beastiary data/hcv_coal.log data/prior.ebola.log \n\n\ud83d\udc19\ud83d\udc01 &lt;span style=\"color: #3498db;\"&gt;STARTING BEASTIARY&lt;/span&gt; \ud83d\udc01\ud83d\udc19\n\nAdding log files:\n\u2705 - data/hcv_coal.log\n\u2705 - data/prior.ebola.log\n\nGo to: &lt;span style=\"color: green;\"&gt;http://127.0.0.1:5000/login?token=8e02d06b-d30e-4a89-8476-fb22712a31b3&lt;/span&gt;\nIf prompted enter token: 8e02d06b-d30e-4a89-8476-fb22712a31b3\n</code></pre>"},{"location":"tutorial/logs-from-the-command-line/#pattern","title":"Pattern","text":"<p>Bash style pattern matching can be used as short hand to specify multiple files. All matches will be available at start up.</p> <pre><code>$ beastiary data/*.log \n\n\ud83d\udc19\ud83d\udc01 &lt;span style=\"color: #3498db;\"&gt;STARTING BEASTIARY&lt;/span&gt; \ud83d\udc01\ud83d\udc19\n\nAdding log files:\n\u2705 - data/hcv_coal.log\n\u2705 - data/prior.ebola.log\n\nGo to: &lt;span style=\"color: green;\"&gt;http://127.0.0.1:5000/login?token=8e02d06b-d30e-4a89-8476-fb22712a31b3&lt;/span&gt;\nIf prompted enter token: 8e02d06b-d30e-4a89-8476-fb22712a31b3\n</code></pre>"},{"location":"tutorial/remote-beastiary/","title":"Remote beastiary","text":"<p>One of the main use cases of beastiary is accessing files on a remote server e.g. a high performance computer (HPC). Here we walk though the process of running beastiary on the University of Melbourne's HPC Spartan (although these steps apply to any remote server). This assumes beastiary is already installed on the remote server (e.g. <code>pip3 --user install beastiary</code>).</p> <pre><code>$ ssh wytamma@spartan.hpc.unimelb.edu.au\n\nWelcome to Spartan, the general purpose High Performance Computer system.\n</code></pre>"},{"location":"tutorial/remote-beastiary/#public-sharing-link","title":"Public sharing link","text":"<p>The easiest way to access beastiary on a remote server is to use the <code>--share</code> flag when starting beastiary. This will generate a public link that can be accessed from any machine.</p> <p>Warning</p> <p>We strongly recommend against disabling security when using the <code>--share</code> flag. We try to make Beastiary as secure as possible, but it is still a public link and there are bad actors.</p> <pre><code>$ beastiary --share    \n\n\ud83d\udc19\ud83d\udc01 &lt;span style=\"color: #3498db;\"&gt;STARTING BEASTIARY&lt;/span&gt; \ud83d\udc01\ud83d\udc19\n\nGo to: &lt;span style=\"color: green;\"&gt;http://127.0.0.1:5000/login?token=8e02d06b-d30e-4a89-8476-fb22712a31b3&lt;/span&gt;\n\nIf prompted enter token: 8e02d06b-d30e-4a89-8476-fb22712a31b3\n\nCreating public shareable link...\n\nBeastiary is now publicly accessible at: &lt;span style=\"color: green;\"&gt;https://grave-profits-stories-idaho.trycloudflare.com&lt;/span&gt;\n</code></pre> <p>When running beastiary with the <code>--share</code> it will use with-cloudflared to create a public link that will redirect public traffic to the local beastiary server. The public link will only work while beastiary is running. If you close the beastiary server you will have to generate a new public link.</p> <p>Note</p> <p>Some firewalls and antivirus software may block public link sharing.</p> <p>If you want to access beastiary on a remote server without creating a public link then you will have to use an SSH tunnel.</p>"},{"location":"tutorial/remote-beastiary/#ssh-tunnel","title":"SSH tunnel","text":"<p>To connect to beastiary on the HPC we must first establish an SSH tunnel so that the port beastiary is running on can be connected to our local machine. We will accomplish this using the <code>-L</code> ssh flag. Connect to the HPC using your normal <code>ssh</code> command, but add <code>-L 5000:localhost:5000</code>. The <code>-L</code> flag tells ssh to forward requests to port 5000 on your local machine to port 5000 on the HPC. </p> <pre><code>$ ssh -L 5000:localhost:5000 wytamma@spartan.hpc.unimelb.edu.au\n\nWelcome to Spartan, the general purpose High Performance Computer system.\n</code></pre> <p>Note</p> <p>If you wanted to run beastiary on a different port on the HPC (i.e. if 5000 is occupied) you could change the 5000 to your desired port e.g. 5001.  <pre><code>ssh -L 5001:localhost:5001 wytamma@spartan.hpc.unimelb.edu.au\n</code></pre> Then start beastiary using the desired port. <pre><code>beastiary --port 5001\n</code></pre></p>"},{"location":"tutorial/remote-beastiary/#start-beastiary","title":"Start beastiary","text":"<p>Now that you are logged into the HPC start beastiary using the <code>beastiary</code> command. Once beastiary has started you can go to http://127.0.0.1:5000 on your local machine to access remote log files. </p> <pre><code>$ beastiary\n\n\ud83d\udc19\ud83d\udc01 &lt;span style=\"color: #3498db;\"&gt;STARTING BEASTIARY&lt;/span&gt; \ud83d\udc01\ud83d\udc19\n\nGo to: &lt;span style=\"color: green;\"&gt;http://127.0.0.1:5000/login?token=8e02d06b-d30e-4a89-8476-fb22712a31b3&lt;/span&gt;\n\nIf prompted enter token: 8e02d06b-d30e-4a89-8476-fb22712a31b3\n</code></pre> <p>Note</p> <p>Because beastiary is running on the remote server you will have to specify paths to log files as they are on the server. </p>"},{"location":"tutorial/remote-beastiary/#reconnecting","title":"Reconnecting","text":"<p>If you are using ssh tunnelling to connect to Beastiary running on the remote server then you should be able to reopen the forwarded port e.g. http://127.0.0.1:5000 while Beastiary is running and the ssh connection remains open. Closing the ssh session or stopping Beastiary will prevent you from reconnect, but that\u2019s expected. If you close the window simply go to http://127.0.0.1:5000 again and re-enter the login token.</p>"},{"location":"tutorial/running-in-the-background/","title":"Running in the background","text":"<p>If you are running <code>beastiary</code> for a long time you may want to run it in the background. There are several options for running a task in the background.</p>"},{"location":"tutorial/running-in-the-background/#beastiary","title":"beastiary &amp;","text":"<p>Putting a <code>&amp;</code> at the end of the <code>beastiary</code> will run beackground, but output will still be log to the console. If you close the terminal then the job will also stop. The processes can also be stopped with the <code>ps</code> and <code>kill</code> commands. Running ps will show all the running commands and their PIDs. Find the PID of the <code>beastiary</code> command and used the command <code>kill &lt;PID&gt;</code> (where <code>&lt;PID&gt;</code> is the beastiary PID) to stop beastiary. Or you can use the fg % 1 command (where 1 is the job id which can be found with <code>$ jobs</code>) to bring beastiary back to the foreground and kill it with <code>ctrl+c</code></p> <pre><code>$ beastiary &amp;\n[1] 46918\n\n\ud83d\udc19\ud83d\udc01 &lt;span style=\"color: #3498db;\"&gt;STARTING BEASTIARY&lt;/span&gt; \ud83d\udc01\ud83d\udc19\n\nAdding log files:\n\u2705 - data/hcv_coal.log\n\nGo to: &lt;span style=\"color: green;\"&gt;http://127.0.0.1:5000/login?token=8e02d06b-d30e-4a89-8476-fb22712a31b3&lt;/span&gt;\nIf prompted enter token: 8e02d06b-d30e-4a89-8476-fb22712a31b3\n\n$ jobs \n[1]  + running    beastiary\n\n$ fg % 1 \n[1]  + 46918 running    beastiary\n^Cfg: job not found: 1\n</code></pre>"},{"location":"tutorial/running-in-the-background/#nohup-beastiary","title":"nohup beastiary &amp;","text":"<p>The <code>nohup</code> and <code>&amp;</code> at the end of the beast command tells bash to run the command in the background and to not stop if you close the terminal. The processes must be stopped with the <code>ps</code> and <code>kill</code> commands.</p>"},{"location":"tutorial/running-in-the-background/#beastiary-ctrlz-jobs-fg-1","title":"beastiary; ctrl+z; jobs; fg %1","text":"<p>Jobs can also be pushed to the background using the job control command <code>ctrl+z</code>. Start beastiary then press <code>ctrl+z</code>. Enter <code>fg %1</code> to bring beastiary back to the foreground (where 1 is the job id which can be found with <code>$ jobs</code>). </p>"},{"location":"tutorial/security/","title":"Security","text":"<p>By default beastiary will generate a unique token used to log in to the webapp. This can be disabled using the <code>--no-security</code> option. At the login page press login without entering the token.</p> <pre><code>$ beastiary --no-security\n\n\ud83d\udc19\ud83d\udc01 &lt;span style=\"color: #3498db;\"&gt;STARTING BEASTIARY&lt;/span&gt; \ud83d\udc01\ud83d\udc19\n\nGo to: &lt;span style=\"color: green;\"&gt;http://127.0.0.1:5000/login?token=8e02d06b-d30e-4a89-8476-fb22712a31b3&lt;/span&gt;\n\n&lt;span style=\"color: yellow;\"&gt;WARNING&lt;/span&gt;: Security disabled!\n</code></pre> <p>Warning</p> <p>If you are using beastiary on a shared computer (e.g. a HPC) disabling security will enable other users to log into your beastiary session and thus access files in your account.</p>"},{"location":"tutorial/security/#user-defined-token","title":"User defined token","text":"<p>Use the <code>--token</code> option to define your own token e.g. so it's the same every time you start beastiary. </p> <pre><code>$ beastiary --token weakPassword\n\n\ud83d\udc19\ud83d\udc01 &lt;span style=\"color: #3498db;\"&gt;STARTING BEASTIARY&lt;/span&gt; \ud83d\udc01\ud83d\udc19\n\nGo to: &lt;span style=\"color: green;\"&gt;http://127.0.0.1:5000/login?token=weakPassword&lt;/span&gt;\n\nIf prompted enter token: weakPassword\n</code></pre>"},{"location":"tutorial/user-interface/","title":"User interface","text":"<p>This section describes the user interface of the beastiary front-end.  </p> <p></p>"},{"location":"tutorial/user-interface/#trace-panel","title":"Trace Panel","text":"<p>The beastiary web-app is comprised of </p> <p>Add a log file using the <code>ADD</code> button. </p> <p></p> <p>Explore the traces of different parameters. </p> <p></p>"}]}